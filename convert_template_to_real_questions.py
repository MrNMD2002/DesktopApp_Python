#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
C√¥ng c·ª• chuy·ªÉn ƒë·ªïi template placeholder th√†nh c√¢u h·ªèi th·ª±c t·∫ø
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from docx import Document
from docx.shared import Inches
import re

def analyze_template_structure(file_path):
    """Ph√¢n t√≠ch c·∫•u tr√∫c template"""
    print("=" * 80)
    print("üîç PH√ÇN T√çCH C·∫§U TR√öC TEMPLATE")
    print("=" * 80)
    
    try:
        doc = Document(file_path)
        print(f"üìÑ File: {os.path.basename(file_path)}")
        print(f"üìä T·ªïng paragraphs: {len(doc.paragraphs)}")
        print()
        
        # T√¨m c√°c c√¢u h·ªèi placeholder
        questions = []
        for i, paragraph in enumerate(doc.paragraphs):
            text = paragraph.text.strip()
            if text.startswith('QN='):
                questions.append((i+1, text))
        
        print(f"‚ùì T√¨m th·∫•y {len(questions)} c√¢u h·ªèi placeholder:")
        for line_num, text in questions:
            print(f"   D√≤ng {line_num}: {text}")
        
        return len(questions)
        
    except Exception as e:
        print(f"‚ùå L·ªói ph√¢n t√≠ch: {e}")
        return 0

def create_real_questions_file():
    """T·∫°o file v·ªõi c√¢u h·ªèi th·ª±c t·∫ø v√† h√¨nh ·∫£nh"""
    print("\n" + "=" * 80)
    print("üìù T·∫†O FILE V·ªöI C√ÇU H·ªéI TH·ª∞C T·∫æ V√Ä H√åNH ·∫¢NH")
    print("=" * 80)
    
    try:
        doc = Document()
        
        # Header
        doc.add_paragraph("QUIZ TEMPLATE - C√ÇU H·ªéI TH·ª∞C T·∫æ")
        doc.add_paragraph("Subject: ISC")
        doc.add_paragraph("Number of Quiz: 20")
        doc.add_paragraph("Lecturer: hungpd2")
        doc.add_paragraph("Date: dd-mm-yyyy")
        doc.add_paragraph("")
        
        # C√¢u h·ªèi 1 - B2B E-Commerce (c√≥ h√¨nh ·∫£nh)
        doc.add_paragraph("QN=1: See the figure and choose the right type of B2B E-Commerce [file:8435.jpg]")
        doc.add_paragraph("a. Sell-side B2B")
        doc.add_paragraph("b. Electronic Exchange")
        doc.add_paragraph("c. Buy-side B2B")
        doc.add_paragraph("d. Supply Chain Improvements and Collaborative Commerce")
        doc.add_paragraph("ANSWER: B")
        doc.add_paragraph("MARK: 0.5")
        doc.add_paragraph("UNIT: Chapter1")
        doc.add_paragraph("MIX CHOICES: Yes")
        doc.add_paragraph("")
        
        # C√¢u h·ªèi 2 - To√°n h·ªçc (c√≥ h√¨nh ·∫£nh)
        doc.add_paragraph("QN=2: Solve the math problem shown in the image [file:math_problem.png]")
        doc.add_paragraph("a. 40")
        doc.add_paragraph("b. 42")
        doc.add_paragraph("c. 43")
        doc.add_paragraph("d. 44")
        doc.add_paragraph("ANSWER: B")
        doc.add_paragraph("MARK: 0.5")
        doc.add_paragraph("UNIT: Chapter1")
        doc.add_paragraph("MIX CHOICES: Yes")
        doc.add_paragraph("")
        
        # C√¢u h·ªèi 3 - ƒê·ªãa l√Ω (kh√¥ng c√≥ h√¨nh ·∫£nh)
        doc.add_paragraph("QN=3: Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam l√†?")
        doc.add_paragraph("a. TP. H·ªì Ch√≠ Minh")
        doc.add_paragraph("b. H√† N·ªôi")
        doc.add_paragraph("c. ƒê√† N·∫µng")
        doc.add_paragraph("d. Hu·∫ø")
        doc.add_paragraph("ANSWER: B")
        doc.add_paragraph("MARK: 0.5")
        doc.add_paragraph("UNIT: Chapter1")
        doc.add_paragraph("MIX CHOICES: Yes")
        doc.add_paragraph("")
        
        # C√¢u h·ªèi 4 - L·ªãch s·ª≠ (c√≥ h√¨nh ·∫£nh)
        doc.add_paragraph("QN=4: Identify the historical event shown in this image [file:independence_day.jpg]")
        doc.add_paragraph("a. 1944")
        doc.add_paragraph("b. 1945")
        doc.add_paragraph("c. 1946")
        doc.add_paragraph("d. 1947")
        doc.add_paragraph("ANSWER: B")
        doc.add_paragraph("MARK: 0.5")
        doc.add_paragraph("UNIT: Chapter1")
        doc.add_paragraph("MIX CHOICES: Yes")
        doc.add_paragraph("")
        
        # C√¢u h·ªèi 5 - Khoa h·ªçc (kh√¥ng c√≥ h√¨nh ·∫£nh)
        doc.add_paragraph("QN=5: Nguy√™n t·ªë n√†o c√≥ k√Ω hi·ªáu H?")
        doc.add_paragraph("a. Helium")
        doc.add_paragraph("b. Hydrogen")
        doc.add_paragraph("c. Carbon")
        doc.add_paragraph("d. Nitrogen")
        doc.add_paragraph("ANSWER: B")
        doc.add_paragraph("MARK: 0.5")
        doc.add_paragraph("UNIT: Chapter1")
        doc.add_paragraph("MIX CHOICES: Yes")
        doc.add_paragraph("")
        
        # C√¢u h·ªèi 6 - VƒÉn h·ªçc (c√≥ h√¨nh ·∫£nh)
        doc.add_paragraph("QN=6: Look at the image and identify the author of this literary work [file:truyen_kieu.jpg]")
        doc.add_paragraph("a. H·ªì Xu√¢n H∆∞∆°ng")
        doc.add_paragraph("b. Nguy·ªÖn Du")
        doc.add_paragraph("c. Nguy·ªÖn Tr√£i")
        doc.add_paragraph("d. Nguy·ªÖn B·ªânh Khi√™m")
        doc.add_paragraph("ANSWER: B")
        doc.add_paragraph("MARK: 0.5")
        doc.add_paragraph("UNIT: Chapter1")
        doc.add_paragraph("MIX CHOICES: Yes")
        doc.add_paragraph("")
        
        # C√¢u h·ªèi 7 - C√¥ng ngh·ªá (kh√¥ng c√≥ h√¨nh ·∫£nh)
        doc.add_paragraph("QN=7: HTML l√† vi·∫øt t·∫Øt c·ªßa?")
        doc.add_paragraph("a. Hyper Text Markup Language")
        doc.add_paragraph("b. High Tech Modern Language")
        doc.add_paragraph("c. Home Tool Markup Language")
        doc.add_paragraph("d. Hyperlink and Text Markup Language")
        doc.add_paragraph("ANSWER: A")
        doc.add_paragraph("MARK: 0.5")
        doc.add_paragraph("UNIT: Chapter1")
        doc.add_paragraph("MIX CHOICES: Yes")
        doc.add_paragraph("")
        
        # C√¢u h·ªèi 8 - Th·ªÉ thao (c√≥ h√¨nh ·∫£nh)
        doc.add_paragraph("QN=8: Based on the image, which sport is shown? [file:football.jpg]")
        doc.add_paragraph("a. B√≥ng r·ªï")
        doc.add_paragraph("b. B√≥ng ƒë√°")
        doc.add_paragraph("c. Tennis")
        doc.add_paragraph("d. B√≥ng chuy·ªÅn")
        doc.add_paragraph("ANSWER: B")
        doc.add_paragraph("MARK: 0.5")
        doc.add_paragraph("UNIT: Chapter1")
        doc.add_paragraph("MIX CHOICES: Yes")
        
        # L∆∞u file
        output_file = "Quiz_Real_Questions_With_Images.docx"
        doc.save(output_file)
        
        print(f"‚úÖ ƒê√£ t·∫°o file v·ªõi c√¢u h·ªèi th·ª±c t·∫ø: {output_file}")
        print("\nüìã N·ªòI DUNG FILE:")
        print("- 8 c√¢u h·ªèi th·ª±c t·∫ø t·ª´ nhi·ªÅu lƒ©nh v·ª±c")
        print("- 5 c√¢u h·ªèi c√≥ tham chi·∫øu h√¨nh ·∫£nh [file:...]")
        print("- 3 c√¢u h·ªèi ch·ªâ c√≥ text")
        print("- ƒê·ªãnh d·∫°ng ƒë√∫ng theo y√™u c·∫ßu")
        print("- ƒê·∫ßy ƒë·ªß ƒë√°p √°n v√† metadata")
        print("- S·∫µn s√†ng ƒë·ªÉ test import")
        
        return output_file
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o file: {e}")
        return None

def replace_placeholders_in_file(input_file, output_file):
    """Thay th·∫ø placeholder trong file hi·ªán t·∫°i"""
    print("\n" + "=" * 80)
    print("üîß THAY TH·∫æ PLACEHOLDER TRONG FILE HI·ªÜN T·∫†I")
    print("=" * 80)
    
    try:
        # ƒê·ªçc file hi·ªán t·∫°i
        doc = Document(input_file)
        
        # Danh s√°ch c√¢u h·ªèi th·ª±c t·∫ø v·ªõi h√¨nh ·∫£nh
        real_questions = [
            {
                'question': 'QN=1: See the figure and choose the right type of B2B E-Commerce [file:8435.jpg]',
                'options': ['a. Sell-side B2B', 'b. Electronic Exchange', 'c. Buy-side B2B', 'd. Supply Chain Improvements and Collaborative Commerce'],
                'answer': 'ANSWER: B',
                'mark': 'MARK: 0.5',
                'unit': 'UNIT: Chapter1',
                'mix': 'MIX CHOICES: Yes'
            },
            {
                'question': 'QN=2: Solve the math problem shown in the image [file:math_problem.png]',
                'options': ['a. 40', 'b. 42', 'c. 43', 'd. 44'],
                'answer': 'ANSWER: B',
                'mark': 'MARK: 0.5',
                'unit': 'UNIT: Chapter1',
                'mix': 'MIX CHOICES: Yes'
            },
            {
                'question': 'QN=3: Th·ªß ƒë√¥ c·ªßa Vi·ªát Nam l√†?',
                'options': ['a. TP. H·ªì Ch√≠ Minh', 'b. H√† N·ªôi', 'c. ƒê√† N·∫µng', 'd. Hu·∫ø'],
                'answer': 'ANSWER: B',
                'mark': 'MARK: 0.5',
                'unit': 'UNIT: Chapter1',
                'mix': 'MIX CHOICES: Yes'
            },
            {
                'question': 'QN=4: Identify the historical event shown in this image [file:independence_day.jpg]',
                'options': ['a. 1944', 'b. 1945', 'c. 1946', 'd. 1947'],
                'answer': 'ANSWER: B',
                'mark': 'MARK: 0.5',
                'unit': 'UNIT: Chapter1',
                'mix': 'MIX CHOICES: Yes'
            },
            {
                'question': 'QN=5: Nguy√™n t·ªë n√†o c√≥ k√Ω hi·ªáu H?',
                'options': ['a. Helium', 'b. Hydrogen', 'c. Carbon', 'd. Nitrogen'],
                'answer': 'ANSWER: B',
                'mark': 'MARK: 0.5',
                'unit': 'UNIT: Chapter1',
                'mix': 'MIX CHOICES: Yes'
            },
            {
                'question': 'QN=6: Look at the image and identify the author of this literary work [file:truyen_kieu.jpg]',
                'options': ['a. H·ªì Xu√¢n H∆∞∆°ng', 'b. Nguy·ªÖn Du', 'c. Nguy·ªÖn Tr√£i', 'd. Nguy·ªÖn B·ªânh Khi√™m'],
                'answer': 'ANSWER: B',
                'mark': 'MARK: 0.5',
                'unit': 'UNIT: Chapter1',
                'mix': 'MIX CHOICES: Yes'
            },
            {
                'question': 'QN=7: HTML l√† vi·∫øt t·∫Øt c·ªßa?',
                'options': ['a. Hyper Text Markup Language', 'b. High Tech Modern Language', 'c. Home Tool Markup Language', 'd. Hyperlink and Text Markup Language'],
                'answer': 'ANSWER: A',
                'mark': 'MARK: 0.5',
                'unit': 'UNIT: Chapter1',
                'mix': 'MIX CHOICES: Yes'
            },
            {
                'question': 'QN=8: Based on the image, which sport is shown? [file:football.jpg]',
                'options': ['a. B√≥ng r·ªï', 'b. B√≥ng ƒë√°', 'c. Tennis', 'd. B√≥ng chuy·ªÅn'],
                'answer': 'ANSWER: B',
                'mark': 'MARK: 0.5',
                'unit': 'UNIT: Chapter1',
                'mix': 'MIX CHOICES: Yes'
            }
        ]
        
        # Thay th·∫ø t·ª´ng paragraph
        question_index = 0
        for i, paragraph in enumerate(doc.paragraphs):
            text = paragraph.text.strip()
            
            # T√¨m c√¢u h·ªèi placeholder
            if text.startswith('QN=') and question_index < len(real_questions):
                # Thay th·∫ø c√¢u h·ªèi
                paragraph.text = real_questions[question_index]['question']
                
                # Thay th·∫ø c√°c d√≤ng ti·∫øp theo
                next_index = i + 1
                for option in real_questions[question_index]['options']:
                    if next_index < len(doc.paragraphs):
                        doc.paragraphs[next_index].text = option
                        next_index += 1
                
                if next_index < len(doc.paragraphs):
                    doc.paragraphs[next_index].text = real_questions[question_index]['answer']
                    next_index += 1
                
                if next_index < len(doc.paragraphs):
                    doc.paragraphs[next_index].text = real_questions[question_index]['mark']
                    next_index += 1
                
                if next_index < len(doc.paragraphs):
                    doc.paragraphs[next_index].text = real_questions[question_index]['unit']
                    next_index += 1
                
                if next_index < len(doc.paragraphs):
                    doc.paragraphs[next_index].text = real_questions[question_index]['mix']
                
                question_index += 1
        
        # L∆∞u file ƒë√£ s·ª≠a
        doc.save(output_file)
        
        print(f"‚úÖ ƒê√£ thay th·∫ø {question_index} c√¢u h·ªèi placeholder")
        print(f"üìÑ File ƒë√£ s·ª≠a: {output_file}")
        
        return output_file
        
    except Exception as e:
        print(f"‚ùå L·ªói thay th·∫ø: {e}")
        return None

def create_demo_with_images():
    """T·∫°o file demo v·ªõi h√¨nh ·∫£nh th·ª±c t·∫ø"""
    print("\n" + "=" * 80)
    print("üñºÔ∏è T·∫†O FILE DEMO V·ªöI H√åNH ·∫¢NH TH·ª∞C T·∫æ")
    print("=" * 80)
    
    try:
        # T·∫°o th∆∞ m·ª•c images n·∫øu ch∆∞a c√≥
        images_dir = "demo_images"
        if not os.path.exists(images_dir):
            os.makedirs(images_dir)
            print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {images_dir}")
        
        # T·∫°o file demo
        doc = Document()
        
        # Header
        doc.add_paragraph("DEMO QUIZ - H√åNH ·∫¢NH TH·ª∞C T·∫æ")
        doc.add_paragraph("Subject: Demo")
        doc.add_paragraph("Number of Quiz: 3")
        doc.add_paragraph("Lecturer: Demo")
        doc.add_paragraph("Date: dd-mm-yyyy")
        doc.add_paragraph("")
        
        # C√¢u h·ªèi 1 - C√≥ h√¨nh ·∫£nh
        doc.add_paragraph("QN=1: What type of B2B E-Commerce is shown in this diagram? [file:b2b_diagram.jpg]")
        doc.add_paragraph("a. Sell-side B2B")
        doc.add_paragraph("b. Electronic Exchange")
        doc.add_paragraph("c. Buy-side B2B")
        doc.add_paragraph("d. Supply Chain")
        doc.add_paragraph("ANSWER: B")
        doc.add_paragraph("MARK: 1.0")
        doc.add_paragraph("UNIT: Chapter1")
        doc.add_paragraph("MIX CHOICES: Yes")
        doc.add_paragraph("")
        
        # C√¢u h·ªèi 2 - Kh√¥ng c√≥ h√¨nh ·∫£nh
        doc.add_paragraph("QN=2: What is 25 + 17?")
        doc.add_paragraph("a. 40")
        doc.add_paragraph("b. 42")
        doc.add_paragraph("c. 43")
        doc.add_paragraph("d. 44")
        doc.add_paragraph("ANSWER: B")
        doc.add_paragraph("MARK: 1.0")
        doc.add_paragraph("UNIT: Chapter1")
        doc.add_paragraph("MIX CHOICES: Yes")
        doc.add_paragraph("")
        
        # C√¢u h·ªèi 3 - C√≥ h√¨nh ·∫£nh
        doc.add_paragraph("QN=3: Identify the programming language shown in this code snippet [file:python_code.png]")
        doc.add_paragraph("a. Java")
        doc.add_paragraph("b. Python")
        doc.add_paragraph("c. C++")
        doc.add_paragraph("d. JavaScript")
        doc.add_paragraph("ANSWER: B")
        doc.add_paragraph("MARK: 1.0")
        doc.add_paragraph("UNIT: Chapter1")
        doc.add_paragraph("MIX CHOICES: Yes")
        
        # L∆∞u file
        output_file = "Demo_Quiz_With_Images.docx"
        doc.save(output_file)
        
        print(f"‚úÖ ƒê√£ t·∫°o file demo: {output_file}")
        print(f"üìÅ Th∆∞ m·ª•c h√¨nh ·∫£nh: {images_dir}")
        print("\nüìã H∆Ø·ªöNG D·∫™N S·ª¨ D·ª§NG:")
        print("1. ƒê·∫∑t h√¨nh ·∫£nh v√†o th∆∞ m·ª•c 'demo_images'")
        print("2. ƒê·∫∑t t√™n file: b2b_diagram.jpg, python_code.png")
        print("3. Test import file .docx v√†o h·ªá th·ªëng")
        print("4. H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông tr√≠ch xu·∫•t v√† l∆∞u h√¨nh ·∫£nh")
        
        return output_file
        
    except Exception as e:
        print(f"‚ùå L·ªói t·∫°o demo: {e}")
        return None

def main():
    """H√†m main"""
    print("üöÄ C√îNG C·ª§ CHUY·ªÇN ƒê·ªîI TEMPLATE TH√ÄNH C√ÇU H·ªéI TH·ª∞C T·∫æ")
    print("=" * 80)
    
    print("\n" + "=" * 80)
    print("üîß T√ôY CH·ªåN")
    print("=" * 80)
    print("1. T·∫°o file m·ªõi v·ªõi c√¢u h·ªèi th·ª±c t·∫ø v√† h√¨nh ·∫£nh")
    print("2. Thay th·∫ø placeholder trong file hi·ªán t·∫°i")
    print("3. T·∫°o file demo v·ªõi h√¨nh ·∫£nh th·ª±c t·∫ø")
    print("4. C·∫£ hai (t·∫°o m·ªõi + thay th·∫ø)")
    
    choice = input("\nCh·ªçn t√πy ch·ªçn (1/2/3/4): ").strip()
    
    if choice == "1":
        # T·∫°o file m·ªõi
        new_file = create_real_questions_file()
        if new_file:
            print(f"\n‚úÖ ƒê√£ t·∫°o file m·ªõi: {new_file}")
            print("üí° S·ª≠ d·ª•ng file n√†y ƒë·ªÉ test ch·ª©c nƒÉng import")
    
    elif choice == "2":
        # Thay th·∫ø trong file hi·ªán t·∫°i
        file_path = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n file template .docx: ").strip()
        if not file_path:
            print("‚ùå Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n file!")
            return
        
        question_count = analyze_template_structure(file_path)
        if question_count == 0:
            print("‚ùå Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi placeholder!")
            return
        
        output_file = file_path.replace('.docx', '_real_questions.docx')
        fixed_file = replace_placeholders_in_file(file_path, output_file)
        if fixed_file:
            print(f"\n‚úÖ ƒê√£ s·ª≠a file: {fixed_file}")
            print("üí° File ƒë√£ ƒë∆∞·ª£c thay th·∫ø placeholder b·∫±ng c√¢u h·ªèi th·ª±c t·∫ø")
    
    elif choice == "3":
        # T·∫°o demo v·ªõi h√¨nh ·∫£nh
        demo_file = create_demo_with_images()
        if demo_file:
            print(f"\n‚úÖ ƒê√£ t·∫°o file demo: {demo_file}")
            print("üí° S·ª≠ d·ª•ng file n√†y ƒë·ªÉ test ch·ª©c nƒÉng h√¨nh ·∫£nh")
    
    elif choice == "4":
        # C·∫£ hai
        file_path = input("Nh·∫≠p ƒë∆∞·ªùng d·∫´n file template .docx: ").strip()
        if not file_path:
            print("‚ùå Vui l√≤ng nh·∫≠p ƒë∆∞·ªùng d·∫´n file!")
            return
        
        question_count = analyze_template_structure(file_path)
        if question_count == 0:
            print("‚ùå Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi placeholder!")
            return
        
        new_file = create_real_questions_file()
        output_file = file_path.replace('.docx', '_real_questions.docx')
        fixed_file = replace_placeholders_in_file(file_path, output_file)
        
        if new_file and fixed_file:
            print(f"\n‚úÖ ƒê√£ t·∫°o c·∫£ hai file:")
            print(f"   üìÑ File m·ªõi: {new_file}")
            print(f"   üîß File ƒë√£ s·ª≠a: {fixed_file}")
            print("üí° B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c·∫£ hai ƒë·ªÉ test")
    
    else:
        print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
    
    print("\n" + "=" * 80)
    print("üéâ HO√ÄN TH√ÄNH")
    print("=" * 80)

if __name__ == "__main__":
    main() 
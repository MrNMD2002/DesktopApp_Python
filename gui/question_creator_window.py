import tkinter as tk
from tkinter import ttk, messagebox, filedialog
from database.database_manager import DatabaseManager
from utils.docx_reader import DocxReader
import os

class QuestionCreatorWindow:
    def __init__(self, parent, auth_manager):
        self.parent = parent
        self.auth_manager = auth_manager
        self.db = DatabaseManager()
        self.docx_reader = DocxReader()
        self.setup_ui()
        self.load_subjects()
    
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi l√†m ƒë·ªÅ"""
        self.window = tk.Toplevel(self.parent)
        self.window.title("Ng∆∞·ªùi l√†m ƒë·ªÅ - H·ªá th·ªëng Qu·∫£n l√Ω ƒê·ªÅ thi")
        self.window.geometry("600x500")
        
        # Frame ch√≠nh
        main_frame = ttk.Frame(self.window, padding="10")
        main_frame.grid(row=0, column=0, sticky="nsew")
        
        # Header
        header_frame = ttk.Frame(main_frame)
        header_frame.grid(row=0, column=0, columnspan=2, sticky="ew", pady=(0, 10))
        
        user_info = self.auth_manager.get_current_user()
        ttk.Label(header_frame, text=f"Ch√†o m·ª´ng: {user_info['full_name']}", 
                 font=("Arial", 12, "bold")).pack(side=tk.LEFT)
        
        ttk.Button(header_frame, text="ƒêƒÉng xu·∫•t", 
                  command=self.logout).pack(side=tk.RIGHT)
        
        # Frame ch·ªçn m√¥n h·ªçc
        subject_frame = ttk.LabelFrame(main_frame, text="Ch·ªçn m√¥n h·ªçc", padding="10")
        subject_frame.grid(row=1, column=0, columnspan=2, sticky="ew", pady=(0, 10))
        
        ttk.Label(subject_frame, text="M√¥n h·ªçc:").grid(row=0, column=0, sticky="w")
        
        self.subject_var = tk.StringVar()
        self.subject_combo = ttk.Combobox(subject_frame, textvariable=self.subject_var, 
                                         state="readonly", width=30)
        self.subject_combo.grid(row=0, column=1, padx=(10, 0), sticky="w")
        
        # Frame upload file
        upload_frame = ttk.LabelFrame(main_frame, text="Upload file .docx", padding="10")
        upload_frame.grid(row=2, column=0, columnspan=2, sticky="ew", pady=(0, 10))
        
        self.file_path_var = tk.StringVar()
        ttk.Entry(upload_frame, textvariable=self.file_path_var, width=50).grid(row=0, column=0, sticky="ew")
        
        ttk.Button(upload_frame, text="Ch·ªçn file", 
                  command=self.select_file).grid(row=0, column=1, padx=(10, 0))
        
        ttk.Button(upload_frame, text="ƒê·ªçc file", 
                  command=self.read_file).grid(row=1, column=0, columnspan=2, pady=10)
        
        # Frame n√∫t b·∫•m
        button_frame = ttk.Frame(upload_frame)
        button_frame.grid(row=2, column=0, columnspan=2, pady=(0, 10))
        
        ttk.Button(button_frame, text="Test File", 
                  command=self.test_file).grid(row=0, column=0, padx=(0, 5))
        
        ttk.Button(button_frame, text="T·∫°o File M·∫´u", 
                  command=self.create_sample_file).grid(row=0, column=1, padx=5)
        
        # Frame h∆∞·ªõng d·∫´n
        guide_frame = ttk.LabelFrame(main_frame, text="H∆∞·ªõng d·∫´n ƒë·ªãnh d·∫°ng", padding="10")
        guide_frame.grid(row=3, column=0, columnspan=2, sticky="ew", pady=(0, 10))
        
        guide_text = self.docx_reader.get_template_instructions()
        guide_label = ttk.Label(guide_frame, text=guide_text, justify=tk.LEFT)
        guide_label.grid(row=0, column=0, sticky="w")
        
        # Frame th·ªëng k√™
        stats_frame = ttk.LabelFrame(main_frame, text="Th·ªëng k√™ c√¢u h·ªèi", padding="10")
        stats_frame.grid(row=4, column=0, columnspan=2, sticky="ew")
        
        # Treeview cho th·ªëng k√™
        columns = ("M√¥n h·ªçc", "T·ªïng c√¢u h·ªèi", "D·ªÖ", "Trung b√¨nh", "Kh√≥")
        self.stats_tree = ttk.Treeview(stats_frame, columns=columns, show="headings", height=5)
        
        for col in columns:
            self.stats_tree.heading(col, text=col)
            self.stats_tree.column(col, width=100)
        
        self.stats_tree.grid(row=0, column=0, sticky="ew")
        
        # Scrollbar
        scrollbar = ttk.Scrollbar(stats_frame, orient="vertical", command=self.stats_tree.yview)
        scrollbar.grid(row=0, column=1, sticky="ns")
        self.stats_tree.configure(yscrollcommand=scrollbar.set)
        
        # N√∫t refresh th·ªëng k√™
        ttk.Button(stats_frame, text="L√†m m·ªõi th·ªëng k√™", 
                  command=self.load_statistics).grid(row=1, column=0, pady=10)
        
        # C·∫•u h√¨nh grid
        self.window.columnconfigure(0, weight=1)
        self.window.rowconfigure(0, weight=1)
        main_frame.columnconfigure(0, weight=1)
        upload_frame.columnconfigure(0, weight=1)
        stats_frame.columnconfigure(0, weight=1)
    
    def load_subjects(self):
        """T·∫£i danh s√°ch m√¥n h·ªçc"""
        try:
            query = "SELECT id, name FROM subjects ORDER BY name"
            subjects = self.db.execute_query(query)
            
            subject_dict = {}
            subject_names = []
            
            for subject in subjects:
                subject_dict[subject['name']] = subject['id']
                subject_names.append(subject['name'])
            
            self.subject_combo['values'] = subject_names
            self.subject_dict = subject_dict
            
            if subject_names:
                self.subject_combo.set(subject_names[0])
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i danh s√°ch m√¥n h·ªçc: {str(e)}")
    
    def select_file(self):
        """Ch·ªçn file .docx"""
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn file .docx",
            filetypes=[("Word documents", "*.docx"), ("All files", "*.*")]
        )
        
        if file_path:
            self.file_path_var.set(file_path)
    
    def read_file(self):
        """ƒê·ªçc file .docx v√† import c√¢u h·ªèi"""
        file_path = self.file_path_var.get().strip()
        subject_name = self.subject_var.get()
        
        if not file_path:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn file!")
            return
        
        if not subject_name:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn m√¥n h·ªçc!")
            return
        
        # Ki·ªÉm tra file t·ªìn t·∫°i
        if not os.path.exists(file_path):
            messagebox.showerror("L·ªói", f"File kh√¥ng t·ªìn t·∫°i:\n{file_path}")
            return
        
        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
        if not file_path.lower().endswith('.docx'):
            messagebox.showerror("L·ªói", f"File kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng .docx:\n{file_path}")
            return
        
        subject_id = self.subject_dict.get(subject_name)
        creator_id = self.auth_manager.get_current_user()['id']
        
        try:
            # Hi·ªÉn th·ªã dialog x√°c nh·∫≠n
            result = messagebox.askyesno("X√°c nh·∫≠n", 
                                       f"B·∫°n c√≥ mu·ªën import c√¢u h·ªèi t·ª´ file n√†y v√†o m√¥n {subject_name}?\n\nFile: {os.path.basename(file_path)}")
            
            if result:
                # Hi·ªÉn th·ªã th√¥ng b√°o ƒëang x·ª≠ l√Ω
                processing_window = tk.Toplevel(self.window)
                processing_window.title("ƒêang x·ª≠ l√Ω...")
                processing_window.geometry("400x150")
                processing_window.transient(self.window)
                processing_window.grab_set()
                
                # CƒÉn gi·ªØa c·ª≠a s·ªï
                processing_window.update_idletasks()
                x = (processing_window.winfo_screenwidth() // 2) - (200)
                y = (processing_window.winfo_screenheight() // 2) - (75)
                processing_window.geometry(f'400x150+{x}+{y}')
                
                # N·ªôi dung
                ttk.Label(processing_window, text="ƒêang ƒë·ªçc file...", 
                          font=("Arial", 12)).pack(pady=20)
                
                progress = ttk.Progressbar(processing_window, mode='indeterminate')
                progress.pack(pady=10, padx=20, fill='x')
                progress.start()
                
                # C·∫≠p nh·∫≠t giao di·ªán
                processing_window.update()
                
                try:
                    # ƒê·ªçc file
                    success, message = self.docx_reader.read_docx_file(file_path, subject_id, creator_id)
                    
                    # ƒê√≥ng c·ª≠a s·ªï x·ª≠ l√Ω
                    processing_window.destroy()
                    
                    if success:
                        messagebox.showinfo("Th√†nh c√¥ng", message)
                        self.file_path_var.set("")  # X√≥a ƒë∆∞·ªùng d·∫´n file
                        self.load_statistics()  # C·∫≠p nh·∫≠t th·ªëng k√™
                    else:
                        # Hi·ªÉn th·ªã l·ªói chi ti·∫øt
                        error_details = f"L·ªói ƒë·ªçc file:\n\n{message}\n\n"
                        error_details += "üîß H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:\n"
                        error_details += "1. Ki·ªÉm tra ƒë·ªãnh d·∫°ng file theo h∆∞·ªõng d·∫´n\n"
                        error_details += "2. ƒê·∫£m b·∫£o file kh√¥ng b·ªã h·ªèng\n"
                        error_details += "3. Ki·ªÉm tra quy·ªÅn ƒë·ªçc file\n"
                        error_details += "4. Ch·∫°y test: python test_file_reading.py"
                        
                        messagebox.showerror("L·ªói", error_details)
                
                except Exception as e:
                    # ƒê√≥ng c·ª≠a s·ªï x·ª≠ l√Ω
                    processing_window.destroy()
                    
                    # Hi·ªÉn th·ªã l·ªói chi ti·∫øt
                    error_details = f"L·ªói kh√¥ng mong mu·ªën:\n\n{str(e)}\n\n"
                    error_details += "üîß H∆∞·ªõng d·∫´n kh·∫Øc ph·ª•c:\n"
                    error_details += "1. Ki·ªÉm tra file c√≥ h·ª£p l·ªá kh√¥ng\n"
                    error_details += "2. Ki·ªÉm tra k·∫øt n·ªëi database\n"
                    error_details += "3. Ch·∫°y test: python test_file_reading.py\n"
                    error_details += "4. Ki·ªÉm tra log file: app.log"
                    
                    messagebox.showerror("L·ªói", error_details)
        
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc file: {str(e)}")
    
    def test_file(self):
        """Test file tr∆∞·ªõc khi import - chi ti·∫øt t·ª´ng d√≤ng"""
        file_path = self.file_path_var.get().strip()
        
        if not file_path:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn file tr∆∞·ªõc khi test!")
            return
        
        # Ki·ªÉm tra file t·ªìn t·∫°i
        if not os.path.exists(file_path):
            messagebox.showerror("L·ªói", f"File kh√¥ng t·ªìn t·∫°i:\n{file_path}")
            return
        
        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
        if not file_path.lower().endswith('.docx'):
            messagebox.showerror("L·ªói", f"File kh√¥ng ph·∫£i ƒë·ªãnh d·∫°ng .docx:\n{file_path}")
            return
        
        try:
            # S·ª≠ d·ª•ng h√†m test chi ti·∫øt m·ªõi
            success, result = self.docx_reader.test_file_detailed(file_path)
            
            # Hi·ªÉn th·ªã dialog k·∫øt qu·∫£
            dialog = tk.Toplevel(self.window)
            dialog.title("K·∫øt qu·∫£ Test File")
            dialog.geometry("600x500")
            dialog.transient(self.window)
            dialog.grab_set()
            
            # CƒÉn gi·ªØa c·ª≠a s·ªï
            dialog.update_idletasks()
            x = (dialog.winfo_screenwidth() // 2) - (300)
            y = (dialog.winfo_screenheight() // 2) - (250)
            dialog.geometry(f'600x500+{x}+{y}')
            
            # Text widget
            text_widget = tk.Text(dialog, wrap="word", padx=10, pady=10, font=("Consolas", 9))
            text_widget.pack(fill="both", expand=True, padx=10, pady=10)
            
            # Scrollbar
            scrollbar = ttk.Scrollbar(dialog, orient="vertical", command=text_widget.yview)
            scrollbar.pack(side="right", fill="y")
            text_widget.configure(yscrollcommand=scrollbar.set)
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            text_widget.insert("1.0", result)
            text_widget.config(state="disabled")
            
            # N√∫t ƒë√≥ng
            ttk.Button(dialog, text="Close", command=dialog.destroy).pack(pady=10)
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ test file: {str(e)}")
    
    def create_sample_file(self):
        """T·∫°o file m·∫´u"""
        try:
            from docx import Document
            
            # T·∫°o file m·∫´u
            doc = Document()
            
            # Th√™m ti√™u ƒë·ªÅ
            doc.add_paragraph("SAMPLE QUESTION FILE")
            doc.add_paragraph("Format: QN=X: Question")
            doc.add_paragraph("")
            
            # C√¢u h·ªèi 1
            doc.add_paragraph("QN=1: What is the capital of Vietnam?")
            doc.add_paragraph("a. Hanoi")
            doc.add_paragraph("b. Ho Chi Minh City")
            doc.add_paragraph("c. Da Nang")
            doc.add_paragraph("d. Hue")
            doc.add_paragraph("ANSWER: A")
            doc.add_paragraph("MARK: 1.0")
            doc.add_paragraph("UNIT: Geography")
            doc.add_paragraph("")
            
            # C√¢u h·ªèi 2
            doc.add_paragraph("C√¢u 2: 2 + 2 = ?")
            doc.add_paragraph("A. 3")
            doc.add_paragraph("B. 4")
            doc.add_paragraph("C. 5")
            doc.add_paragraph("D. 6")
            doc.add_paragraph("ƒê√°p √°n: B")
            doc.add_paragraph("ƒêi·ªÉm: 0.5")
            doc.add_paragraph("ƒê∆°n v·ªã: To√°n h·ªçc")
            
            # L∆∞u file
            sample_file = "sample_questions.docx"
            doc.save(sample_file)
            
            messagebox.showinfo("Th√†nh c√¥ng", 
                              f"ƒê√£ t·∫°o file m·∫´u: {sample_file}\n\n"
                              "B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng file n√†y ƒë·ªÉ test ch·ª©c nƒÉng import.")
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫°o file m·∫´u: {str(e)}")
    
    def load_statistics(self):
        """T·∫£i th·ªëng k√™ c√¢u h·ªèi"""
        try:
            query = """
                SELECT s.name as subject_name,
                       COUNT(q.id) as total_questions,
                       SUM(CASE WHEN q.difficulty_level = 'easy' THEN 1 ELSE 0 END) as easy_count,
                       SUM(CASE WHEN q.difficulty_level = 'medium' THEN 1 ELSE 0 END) as medium_count,
                       SUM(CASE WHEN q.difficulty_level = 'hard' THEN 1 ELSE 0 END) as hard_count
                FROM subjects s
                LEFT JOIN questions q ON s.id = q.subject_id
                GROUP BY s.id, s.name
                ORDER BY s.name
            """
            
            stats = self.db.execute_query(query)
            
            # X√≥a d·ªØ li·ªáu c≈©
            for item in self.stats_tree.get_children():
                self.stats_tree.delete(item)
            
            # Th√™m d·ªØ li·ªáu m·ªõi
            for stat in stats:
                self.stats_tree.insert("", "end", values=(
                    stat['subject_name'],
                    stat['total_questions'] or 0,
                    stat['easy_count'] or 0,
                    stat['medium_count'] or 0,
                    stat['hard_count'] or 0
                ))
        
        except Exception as e:
            messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™: {str(e)}")
    
    def logout(self):
        """ƒêƒÉng xu·∫•t"""
        self.auth_manager.logout()
        self.window.destroy()
        messagebox.showinfo("Th√¥ng b√°o", "ƒê√£ ƒëƒÉng xu·∫•t th√†nh c√¥ng!") 